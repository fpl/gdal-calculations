#summary commandline raster calculator
#labels GDAL,Raster,Calculator
=The commandline raster calculator=
<pre> Name:    gdal_calculate
Purpose: Perform simple tiled raster calculations (AKA "map algebra") 
         from the commandline
Notes - Can handle rasters with different extents,cellsizes and coordinate systems
        as long as they overlap. If cellsizes differ, the output cellsize will be
        that of the leftmost Dataset in the expression.
      - GDALDataset and RasterBand and numpy method and attribute calls are passed down to the underlying 
        GDALDataset, GDALRasterBand and ndarray objects.
      - If numexpr is installed, it can be used to evaluate your expressions, but note the limitations 
        specified in the examples below.
      - If numexpr is installed, gdal_calculate will try to use numexpr.evaluate to process 
        the expression as it is much faster. However, numexpr expressions are very limited: 
        tiled processing, on-the-fly reprojection, extent clipping/snapping, 
        method/function calls and subscripting are not supported.

Required parameters:
     --calc     : calculation in numpy syntax, rasters specified as using
                  any legal python variable name syntax, band numbers are
                  specified using square brackets (zero based indexing)
     --outfile  : output filepath
     --{*}      : filepaths for raster variables used in --calc
                  e.g. --calc='(someraster[0]+2)*c' --someraster='foo.tif' --c='bar.tif'

Optional parameters:
     --of            : GDAL format for output file (default "GTiff")')
     --co            : Creation option to the output format driver.
                       Multiple options may be listed.
     --extent        : one of MINOF|INTERSECT|MAXOF|UNION|"xmin ymin xmax ymax"
                       (Default=MINOF)
     --nodata        : handle nodata using masked arrays (Default=False)
                       uses numpy.ma.MaskedArray to handle NoData values
                       MaskedArrays can be much slower...
     --notile        : don't use tiled processing, faster but uses more memory (Default=False)
     --overwrite     : overwrite if required (Default=False)
     --reproject     : reproject if required (Default=False)
                       datasets are projected to the SRS of the first input
                       dataset in an expression
     --resampling    : one of "AVERAGE"|"BILINEAR"|"CUBIC"|"CUBICSPLINE"|
                       "LANCZOS"|"MODE"|"NEAREST"|gdal.GRA_*)
                       (Default="NEAREST")
     --tempdir       : temporary working directory

Examples:
       gdal_calculate --outfile=../testdata/ndvi.tif       \
            --calc="((nir[3]-red[2].astype(numpy.float32))/(nir[3]+red[2].astype(numpy.float32)))" \
            --red=../testdata/landsat_utm50.tif  \
            --nir=../testdata/landsat_geo.tif    \
            --overwrite --reproject --extent=MAXOF

       #Using numexpr. Note limitations.
       gdal_calculate --outfile=../testdata/ndvi.tif       \
            --calc="((nir-red)/(nir+red))" \
            --red=../testdata/singleband_red_utm50.tif  \
            --nir=../testdata/singleband_nir_utm50.tif    \
            --overwrite --notile
</pre>           